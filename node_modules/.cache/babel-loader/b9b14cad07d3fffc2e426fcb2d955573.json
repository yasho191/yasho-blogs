{"ast":null,"code":"import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ObserverMap = new Map();\nvar RootIds = new Map();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get; // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n * Monitors scroll, and triggers the children function with updated props\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        tag = _this$props2.tag,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(Component);\n\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView;\n\n  var unobserve = useRef();\n\n  var _React$useState = useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport default InView;\nexport { InView, useInView };","map":{"version":3,"sources":["../src/observers.ts","../src/InView.tsx","../src/useInView.tsx"],"names":["ObserverMap","RootIds","rootId","optionsToId","options","key","getRootId","id","instance","elements","observer","entries","inView","entry","callback","thresholds","Array","observe","element","createObserver","callbacks","props","InView","threshold","triggerOnce","initialInView","undefined","componentDidUpdate","prevProps","componentWillUnmount","observeNode","root","rootMargin","trackVisibility","delay","unobserve","node","isPlainChildren","render","ref","handleNode","children","as","tag","useInView","skip","React","state","setState","setRef","useEffect","result"],"mappings":"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","sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}